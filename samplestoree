# SI 201 Project 1
# Your name: Jerri Boyd
# Your student id: 11704225
# Your email: jerrib@umich.edu
# Who or what you worked with on this homework (including generative AI like ChatGPT):
# If you worked with generative AI also add a statement for how you used it.  
# e.g.: 
# Asked Chatgpt hints for debugging and suggesting the general sturcture of the code
# I asked chat for help with my functions and test case.
import csv


def load_SampleStore(csv_file):
    rows = []
    with open(csv_file, newline="", encoding="utf-8-sig") as f:
        for r in csv.DictReader(f):
            state = (r.get("State") or "").strip()
            cat   = (r.get("Category") or "").strip()
            try:
                sales = float(r.get("Sales") or 0)
            except ValueError:
                sales = 0.0
            rows.append({"State": state, "Category": cat, "Sales": sales})
    return rows


def percent(part, whole):
    if whole == 0:
        return 0.0
    return (part / whole) * 100

def calculate_percentages(sales):
    totals = {}
    tech   = {}
    for r in sales:
        s = r["State"]
        c = r["Category"].lower().strip()
        v = r["Sales"]
        totals[s] = totals.get(s, 0) + v
        if c == "technology":
            tech[s] = tech.get(s, 0) + v

    out = {}
    for s in totals:
        out[s] = round(percent(tech.get(s, 0), totals[s]), 2)
    return out


def find_extremes(percentages):
    """
    Return ((lowest_pct, [states...]), (highest_pct, [states...])) including ties.
    """
    if not percentages:
        return (0.0, []), (0.0, [])
    values = list(percentages.values())
    lo = min(values)
    hi = max(values)
    low_states  = sorted([s for s, p in percentages.items() if p == lo])
    high_states = sorted([s for s, p in percentages.items() if p == hi])
    return (lo, low_states), (hi, high_states)

def main():
    data = load_SampleStore("SampleSuperstore.csv")

    pct_by_state = calculate_percentages(data)
    (low_pct, low_states), (high_pct, high_states) = find_extremes(pct_by_state)

    print("Highest Percentage of Technology sales by State:",
          ", ".join(high_states), f"{high_pct}%")
    print("Lowest Percentage of Technology sales by State:",
          ", ".join(low_states),  f"{low_pct}%")

    with open("technology_share_by_state.csv", "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["State", "Percent_Technology_Sales"])
        for s, p in sorted(pct_by_state.items(), key=lambda x: x[1], reverse=True):
            w.writerow([s, p])

if __name__ == "__main__":
    main()



import unittest, csv, os

class TestProjectMinimal(unittest.TestCase):
    def test_percent_zero_whole(self):
        self.assertEqual(percent(5, 0), 0.0)

    def test_calculate_percentages_basic(self):
        rows = [
            {"State": "MI", "Category": "Technology", "Sales": 100.0},
            {"State": "MI", "Category": "Furniture",  "Sales": 100.0},
            {"State": "OH", "Category": "Office Supplies", "Sales": 50.0},
        ]
        out = calculate_percentages(rows)
        
        self.assertEqual(out["MI"], 50.00)
        self.assertEqual(out["OH"], 0.00)

    def test_find_extremes_ties(self):
        percentages = {"A": 0.0, "B": 25.0, "C": 0.0, "D": 25.0}
        (lo_pct, lo_states), (hi_pct, hi_states) = find_extremes(percentages)
        self.assertEqual(lo_pct, 0.0)
        self.assertListEqual(lo_states, ["A", "C"])
        self.assertEqual(hi_pct, 25.0)
        self.assertListEqual(hi_states, ["B", "D"])

    def test_load_SampleStore_dictreader(self):
       
        path = "_tmp_sample.csv"
        with open(path, "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            w.writerow(["State", "Category", "Sales"])
            w.writerow(["CA", "Technology", "12.5"])
            w.writerow(["CA", "Furniture",  "7.5"])
        try:
            rows = load_SampleStore(path)
            self.assertEqual(len(rows), 2)
            self.assertEqual(rows[0]["State"], "CA")
            self.assertEqual(rows[0]["Category"], "Technology")
            self.assertIsInstance(rows[0]["Sales"], float)
        finally:
            if os.path.exists(path):
                os.remove(path)





